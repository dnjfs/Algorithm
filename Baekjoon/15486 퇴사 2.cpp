//백준 15486 퇴사 2

#include "iostream"
using namespace std;

int ans[1500050];
int main()
{
	int N, T, P, m = 0;
	/*
	N: 퇴사까지 남은 날짜
	T: 상담을 완료하는데 걸리는 기간
	P: 상담을 했을 때 받을 수 있는 금액
	m: 현재까지 얻은 최대 수익
	*/
	cin >>N;

	for(int i = 0; i < N; i++)
	{
		cin >>T >>P;

		m = max(m, ans[i]); //i일까지의 최대 수익
		ans[i+T] = max(ans[i+T], m+P); //i일에 T일만큼 걸리는 일을 했을 때 얻는 이익이 더 크면 일을 함
	}

	cout <<max(m, ans[N]); //N일까지의 최대 수익과 N일에 끝나는 일(N-t일에 t+1일이 걸리는 일)을 했을 때의 최대 수익을 비교
}




/*
퇴사하기 전 N일 동안 상담을 하여 얻을 수 있는 최대 수익을 구하는 문제입니다.
한 번 상담이 끝나면 상담을 완료하기 전까지 다른 상담은 할 수 없습니다.
i일에 T일이 걸리는 상담을 하면 i+T일에는 다른 상담을 할 수 있는 걸 이용하여 상담을 하는 게 좋을지 수익을 비교하여 배열의 값을 갱신합니다.
DP를 사용해야 될 것 같긴 했지만 지금까지 봐온 DP 문제와는 조금 구조가 달라 조금 헤매었지만 다양한 형태로 DP를 구현할 수 있는 연습이 되었습니다.
*/
