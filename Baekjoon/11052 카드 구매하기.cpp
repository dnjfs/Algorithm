//백준 11052 카드 구매하기

#include "iostream"

using namespace std;

int main()
{
	int N, P[1001], c[1001] = {0};
	/*
	N: 구매하려는 카드의 개수
	P[i]: 카드 i개가 포함된 카드팩의 가격
	c[i]: 카드 i개를 구매했을 때 최대 비용
	*/
	cin >>N;

	for(int i = 1; i <= N; i++)
	{
		cin >>P[i];
		for(int j = 1; j <= i; j++) //모든 c[0]+P[i] ~ c[i-1]+P[1] 중 최댓값을 저장
			c[i] = max(c[i], c[i-j]+P[j]);
	}

	cout <<c[N];
}




/*
N개의 카드팩의 가격이 주어졌을 때 N개의 카드를 구매하기 위해 지불해야 하는 금액의 최댓값을 구하는 문제입니다.
DP를 이용하여 c[] 배열을 1부터 N까지 채워줍니다.
c[i]를 구할 땐 카드를 i-1개 구매한 상태에서 카드 1개가 포함된 카드팩을 샀을 때의 비용,
카드를 i-2개 구매한 상태에서 카드 2개가 포함된 카드팩을 샀을 때의 비용, ...,
0개 구매한 상태에서 i개가 포함된 카드팩을 샀을 때의 비용 중 최댓값을 찾아 저장하면 됩니다.
시간복잡도는 O(N^2)입니다.
*/